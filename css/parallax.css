body{
	margin: 0;
	padding: 0;
	background-color: #f4f4f4;
	font:15px/1.5 Arial;
}
.container{
	width: 80%;
	margin: auto;
	overflow: hidden;
}
ul{
	margin: 0;
	padding: 0;
}

.button_1{
	height: 35px;
	background: #e8491d;
	border:0;
	padding-left: 20px;
	padding-right: 20px;
	color: #fff;
	margin-left: 5px;
}

/*header*/
header{
	background: #35424a;
	color: #fff;
	padding-top: 30px;
	min-height: 70px;
	border-bottom: #e8491d 3px solid;
}

header a{
	color: #ffffff;
	text-decoration: none;
	text-transform: uppercase;
	font-size: 16px;
}

header li{
	float: left;
	display:inline;
	padding: 0 20px 0 20px;
}

header #branding{
	float: left;
}
header #branding h1{
	margin: 0;
}
header nav{
	float: right;
	margin-top: 10px;
}
header .highlight, header .current a{
	color: #e8491d;
	font-weight: bold;
}

header a:hover{
	color: #cccccc;
	font-weight: bold;
}

#showcase{
	min-height: 400px;
	background: url('../img/s4.jpg') no-repeat 0 -400px;
	background-size: cover;
	text-align: center;
	color: #ffffff;
}

#showcase h1{
	margin-top: 100px;
	font-size: 55px;
	margin-bottom: 10px;
}
#showcase p{	
	font-size: 20px;
}
#newsletter{
	padding:15px;
	color: #fff;
	background: #35424a;
}

#newsletter h1{
	float: left;
}
#newsletter form{
	float: right;
	margin-top: 15px;
}
#newsletter input[type="email"]{
	padding: 4px;
	height: 25px;
	width: 250px;
}




.section {
  /* Needed for children to be absolutely positioned relative to the parent. */
  position: relative;
  /* The height of the container. Must be set, but it doesn't really matter what the value is. */
  height: 100vh;

  /* For text formatting. */
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  text-shadow: 0 0 5px #000;
}

.parallax::after {
  /* Display and position the pseudo-element */
  content: " ";
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  /* Move the pseudo-element back away from the camera,
   * then scale it back up to fill the viewport.
   * Because the pseudo-element is further away, it appears to move more slowly, like in real life. */
  transform: translateZ(-1px) scale(1.5);
  /* Force the background image to fill the whole element. */
  background-size: 100%;
  /* Keep the image from overlapping sibling elements. */
  z-index: -1;
}

/* The styling for the static div. */
.static {
  background: red;
}

/* Sets the actual background images to adorable kitties. This part is crucial. */
.bg1::after {
  min-height: 400px;
	background: url('../img/s4.jpg') no-repeat 0 -400px;
	background-size: cover;
	text-align: center;
	color: #ffffff;
}

.bg2::after {
  background-image: url('https://placekitten.com/g/800/600');
}


.wrapper {
  /* The height needs to be set to a fixed value for the effect to work.
   * 100vh is the full height of the viewport. */
  height: 100vh;
  /* The scaling of the images would add a horizontal scrollbar, so disable x overflow. */
  overflow-x: hidden;
  /* Enable scrolling on the page. */
  overflow-y: auto;
  /* Set the perspective to 2px. This is essentailly the simulated distance from the viewport to transformed objects.*/
  perspective: 2px;
}